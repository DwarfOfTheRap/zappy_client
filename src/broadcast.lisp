
(defun get-broadcast (str team level counter state present inventory egg)
  "Read the broadcast response, update an elevation closure if needed
and return a tuple (direction . message): (int . symbol) or nil"
  (let ((dir (parse-integer (subseq str 8 9))) (msg (subseq str 10)))
    (cond
     ((string= (format nil "~a, ~a" team level) msg)
      (cond
        ((or (funcall (cdr state) 'wandering) (funcall (cdr state) 'redirection)
             (funcall (cdr state) 'redirect-hatch) (funcall (cdr state) 'hatching))
         (progn
           (funcall (car state) 'respond)
           (return-from get-broadcast (cons dir 'elevation))))
        ((funcall (cdr state) 'joining) (return-from get-broadcast (cons dir 'elevation)))
        ((and (funcall (cdr state) 'broadcasting) (> (cdar inventory) 16))
         (funcall (car state) 'putdown))
        )
      )

     ((cl-ppcre:scan (format nil "level: \\d, ~a" team) msg)
      (or (= (parse-integer (subseq msg 7 8)) level)
          (funcall (car state) 'hara-kiri)
        )
      )
     ((cl-ppcre:scan (format nil "egg: \\d, ~a" team) msg)
      (let ((eggs (parse-integer (subseq msg 5 6))))
        (funcall (third egg) eggs)
        (if (> eggs 0)
            (funcall (car state) 'laying)
            (funcall (car state) 'wait-for-hatch))
        )
      )
     ((string= (format nil "stop ~a, ~a" team level) msg)
      (if (or (funcall (cdr state) 'broadcasting) (funcall (cdr state) 'respond)
              (funcall (cdr state) 'putdown) (funcall (cdr state) 'waiting)
              (funcall (cdr state) 'joining))
        (progn
          (funcall (third present) 0)
          (funcall (third counter) 0)
          (funcall (car state) 'stopping)
          )
        )
      )
     ((string= (format nil "connected: ~a, ~a" team level) msg)
      (progn
        (funcall (third egg) 0)
        (funcall (car state) 'stopping)
        )
      )
     ((and (or (funcall (cdr state) 'broadcasting) (funcall (cdr state) 'putdown))
           (string= (format nil "present: ~a, ~a" team level) msg))
      (funcall (first present))
      )
     ((string= msg (format nil "lay: ~a" team))
      (if (> (funcall (fourth egg)) 0) (funcall (second egg)))
      )
     ((and (= dir 0) (or (funcall (cdr state) 'broadcasting)
                         (funcall (cdr state) 'putdown))
           (string= (format nil "ready: ~a" team) msg))
      (funcall (first counter)))
     (t nil)
     )
    nil
    )
  )
